{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./userTypes\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { SignInSuccess, SignInFailure } from \"./userActions\";\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error.message));\n  }\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error.message));\n  }\n}\n\n;\n\nfunction* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\n;\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n\n;\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGNI_IN_START, signInWithGoogle);\n}\n\n;\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\n;\n\nfunction* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\n;\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/home/nikhil/Desktop/softwaredevelopment/projects/crown-clothing/src/redux/user/userSagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","SignInSuccess","SignInFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGNI_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,QAAyC,oBAAzC;AACA,OAAQC,eAAR,MAA8B,aAA9B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,eAA7C;AAGA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAC9C,MAAG;AACC,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACI,yBAAD,EAA4BK,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAI,MAAMD,OAAO,CAACE,GAAR,EAA5B;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AAAEO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAK,CAACC,OAAP,CAAd,CAAT;AACH;AACJ;;AAED,UAAUC,gBAAV,GAA4B;AACxB,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAACiB,eAAL,CAAqBhB,cAArB,CAArB;AACA,UAAMK,uBAAuB,CAACU,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOH,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAK,CAACC,OAAP,CAAd,CAAT;AACH;AACJ;;AAAA;;AAED,UAAUI,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA1B,EAAuD;AACnD,MAAI;AACA,UAAM;AAACL,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAArB;AACA,UAAMf,uBAAuB,CAACU,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOH,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;;AAAA;;AAED,UAAUU,mBAAV,GAA+B;AAC3B,MAAI;AACA,UAAMhB,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACA,QAAG,CAACI,QAAJ,EAAc;AACd,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACH,GAJD,CAIE,OAAOM,KAAP,EAAc;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;;AAAA;;AAED,UAAUW,mBAAV,GAA+B;AAC3B,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,qBAAjB,EAAwCV,gBAAxC,CAAhB;AACH;;AAAA;;AAED,UAAUW,kBAAV,GAA8B;AAC1B,QAAM/B,UAAU,CAACI,eAAe,CAAC4B,mBAAjB,EAAsCT,eAAtC,CAAhB;AACH;;AAAA;;AAED,UAAUU,kBAAV,GAA8B;AAC1B,QAAMjC,UAAU,CAACI,eAAe,CAAC8B,kBAAjB,EAAqCN,mBAArC,CAAhB;AACH;;AAAA;AAED,OAAO,UAAUO,SAAV,GAAqB;AACxB,QAAMjC,GAAG,CAAC,CACNC,IAAI,CAAC0B,mBAAD,CADE,EAEN1B,IAAI,CAAC4B,kBAAD,CAFE,EAGN5B,IAAI,CAAC8B,kBAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import {takeLatest, put, all, call} from \"redux-saga/effects\";\nimport  UserActionTypes  from \"./userTypes\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { SignInSuccess, SignInFailure } from \"./userActions\";\n\n\nexport function* getSnapshotFromUserAuth(userAuth){\n    try{\n        const userRef = yield call(createUserProfileDocument, userAuth)\n        const userSnapshot  = yield userRef.get()\n        yield put(SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\n    } catch (error) {\n        yield put(SignInFailure(error.message))\n    }    \n}\n\nfunction* signInWithGoogle(){\n    try {\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        yield put(SignInFailure(error.message))\n    }    \n};\n\nfunction* signInWithEmail({payload: {email, password}}){\n    try {\n        const {user} = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        yield put(SignInFailure(error))\n    }\n};\n\nfunction* isUserAuthenticated(){\n    try {\n        const userAuth = yield getCurrentUser();\n        if(!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n    } catch (error) {\n        yield put(SignInFailure(error))\n    }\n};\n\nfunction* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGNI_IN_START, signInWithGoogle)\n};\n\nfunction* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n};\n\nfunction* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n};\n\nexport function* userSagas(){\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onCheckUserSession)\n    ])\n}"]},"metadata":{},"sourceType":"module"}